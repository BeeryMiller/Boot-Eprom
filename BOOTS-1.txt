********************************************************************************
*
*   1/18/88 reset keyboard using keyboard clock line
*
* 2014SEP18 Reconciled source to 0.98 EPROM - code now matches distribution. TT
*           See Michael Zapf email for bugs related to HFDC IO and keyboard
*
*
********************************************************************************
       DEF  ENTRY
       DEF  GENMOD       NEEDS TO RESOLVE AT >02CC FOR GENMOD SENSE AT
*                        SCSI2\SECTOR_S IN MDOS SOURCE
VDPWD  EQU  >F100
VDPRD  EQU  >F100
VDPWA9 EQU  >F102
VDPRD4 EQU  >8800
*
*   NOW FOR THE ENTRY OF THE SWAN PICTURE
*
SWAN   EQU  >1AEC
THEEND EQU  >0A00        ENTRY FOR RSBUG
*
* NOW SOME SECTOR 0 DEFINITIONS ON THE FLOPPY DISK
*
DSKNAM EQU  0
NUMAU  EQU  DSKNAM+10    TOTAL NUMBER OF AU'S ON DISK
DSCPTK EQU  NUMAU+2      SECTORS PER TRACK ON THIS DISKETTE
DNAME  EQU  DSCPTK+1     NAME "DSK"
DPROTC EQU  DNAME+3      "P" IF PROTECTED " " IF UNPROTECTED
DTKPSD EQU  DPROTC+1     # OF TRACKS PER SIDE
DNUMSD EQU  DTKPSD+1     # OF SIDES
DDENS  EQU  DNUMSD+1     0 IS SINGLE 1 IS DOUBLE 2 IS QUAD
DSPRAU EQU  DDENS+1      SECTORS PER AU
*
* NOW FOR FILE DESCRIPTOR RECORD ON FLOPPY
*
DFINAM EQU  0
DFSTF  EQU  DFINAM+12    FILE STATUS FLAGS
DNRPAU EQU  DFSTF+1      NUMBER OF RECORDS PER AU
DNL2RA EQU  DNRPAU+1     NUMBER OF LEVEL 2 RECORDS ALLOCATED
DEOFOS EQU  DNL2RA+2     END OF FILE OFFSET
DLRCLN EQU  DEOFOS+1     LOGICAL RECORD LENGTH
DNL3RA EQU  DLRCLN+1     NUMBER OF LEVEL 3 RECORDS ALLOCATED
DPTRS  EQU  DFINAM+28    DATA CHAIN POINTERS START HERE
*
* NOW FOR SOME 99/4(A) DEFINITIONS
*
KEYCOD EQU  >8375
*
*  CRU DEFINITIONS
*
CRUMOD EQU  >1EE0        CRU BASE FOR 16 BITS CONCERNING MODE, ETC.
*
NTSCVD EQU  5            0 IF NTSC, 1 IF PAL VIDEO
CLKKB  EQU  8            ALLOW KEYBOARD CLOCK
CLRKB  EQU  9            CLEAR KEYBOARD INPUT
NCMOD  EQU  10           NEW COMPUTER MODE=1, 4A=0
MAPMOD EQU  11           MAP MODE=1,  ROM MODE=0
*
CR9901 EQU  0            BASE OF INTERNAL 9901 CHIP
*
INTXT  EQU  1            ENABLE EXTERNAL INT TO 9901=1, NOT ENABLE=0
INTVDP EQU  2            ENABLE VDP INT TO 9901=1, NOT ENABLE=0
INTKB  EQU  8            ENABLE KEY BOARD INT TO 9901=1, NOT ENABLE=0
CPEBRS EQU  16           PE BOX RESET 1=ACTIVE, 0=INACTIVE
C9938  EQU  17           RESET TO AVDP CHIP
KBREST EQU  22           BIT TO RESET EXTERNAL KEYBOARD IF AVAILABLE
XMEMCY EQU  23           EXTERNAL MEM CYCLES 0=LONG, 1=SHORT
VDPWAT EQU  25           VDP WAIT CYCLES 1=ADD 15 CYCLES, 0=ADD NONE
*
*   MEMORY MAPPED I/O
*
* FIRST 4 MODE
MAP04  EQU  >8000        0->1FFF
MAPRG4 EQU  MAP04
MAP24  EQU  MAP04+1      >2000->3FFF
MAP44  EQU  MAP24+1      >4000->5FFF
MAP64  EQU  MAP44+1      >6000->7FFF
MAP84  EQU  MAP64+1      >8000->9FFF
MAPA4  EQU  MAP84+1      >A000->BFFF
MAPC4  EQU  MAPA4+1      >C000->DFFF
MAPE4  EQU  MAPC4+1      >E000->FFFF
*
GPLWS  EQU  >83E0             GPL WORK SPACE
*
* NOW 9640 MODE
*
KEYBF9 EQU  >F118        KEY BUFFER IN GATE ARRAY
*
MAP09  EQU  >F110        0->1FFF
MAPRG9 EQU  MAP09
MAP29  EQU  MAP09+1      >2000->3FFF
MAP49  EQU  MAP29+1      >4000->5FFF
MAP69  EQU  MAP49+1      >6000->7FFF
MAP89  EQU  MAP69+1      >8000->9FFF
MAPA9  EQU  MAP89+1      >A000->BFFF
MAPC9  EQU  MAPA9+1      >C000->DFFF
MAPE9  EQU  MAPC9+1      >E000->FFFF

* NOW FOR RAM BUFFER AS USED IN 9640 BOOT
*   0-1FFF    BOOT ROM
*   2000-3FFF RAM BUFFER TO BOOT INTO

LODPAG EQU  >F111

*   4000-5FFF MEMORY MAPPED I/O IN PERPHERAL
*   6000-7FFF ANYTHING
*   8000-9FFF ANYTHING
*   A000-BFFF ANYTHING
*   C000-DFFF ANYTHING
*   E000-E0FF SECTOR 0 OF BOOT FLOPPY
*   E400-E4FF SECTOR 1 OF FLOPPY
*   E800-E8FF FILE DESCRIPTOR RECORD
*   F000-F0FF PAD RAM
*   F100-F140 MEMORY MAPPED I/O

RAMBUF EQU  >2000        WHERE DATA IS TO GO FOR BOOT PROGRAM
ENDRBF EQU  RAMBUF+>2000 END OF PAGE BUFFER
SC0BUF EQU  >E000        SECTOR 0 BUF GOES HERE
SC1BUF EQU  >E400        SECTOR 1 BUF GOES HERE
FDRBUF EQU  >E800        FILE DESCRIPTOR RECORD GOES HERE

* NOW FOR FLOPPY LAYOUT AS GIVEN BY MEMORY MAPPED I/O AT C000

VALDSR EQU  >4000
VERID  EQU  >4001
FLPRAM EQU  >5000


* NOW FOR MYARC MEMORY MAPPED I/O LAYOUT

MFDCCR EQU  >5FF9
MFDCTR EQU  >5FFB
MFDCSC EQU  >5FFD
MFDCDR EQU  >5FFF
MFDCSR EQU  >5FF1

* NOW FOR TI/CORCOM MEMORY MAPPED I/O LAYOUT

TFDCCR EQU  >5FF8
TFDCTR EQU  >5FFA
TFDCSC EQU  >5FFC
TFDCWD EQU  >5FFE
TFDCSR EQU  >5FF0
TFDCRD EQU  >5FF6

* NOW FOR THE MYARC FLOPPY LAYOUT CRU BITS
* FIRST OUTPUT

MFDCRS EQU  1            RESET FLOPPY CONT., 0=ACTIVE
MFDCSD EQU  2            SIDE 0=0,1=1
MFDCDN EQU  3            DENSITY 0=DOUBLE, 1=SINGLE
MDS1   EQU  4            DRIVE SELECT 1
MDS2   EQU  5            "      "     2
MDS3   EQU  6            "      "     3
MDS4   EQU  7            "      "     4

* NOW FOR INPUT BITS

MCINT  EQU  0            INT LINE STATUS
MCDR   EQU  1            DATA REQUEST STATUS
MCWV   EQU  2            WRITE VERIFY 1=YES, 0=NO VERIFY

* NOW FOR TI/CORCOM CRU FLOPPY LAYOUT BITS
* FIRST OUTPUT

MOTBIT EQU  1            MOTOR ON BIT
WAIENB EQU  2            WAIT ENABLE
HDLOAD EQU  3            HEAD LOAD
TDS1   EQU  4            DRIVE SEL 1
TDS2   EQU  5            DRIVE SEL 2
TDS3   EQU  6            DRIVE SEL 3
TSDSEL EQU  7            SIDE SELECT
CDENS  EQU  10           DENSITY 0=DOUBLE, 1=SINGLE
CROMPG EQU  11           ROM PAGE SELECT


* NOW FOR INPUT BITS

* NOW FOR SOME CORCOMP INPUT BITS

SW1    EQU  18           THESE BITS DETERMINE SPEED RATES
SW2    EQU  22

* NOW FOR MASKS ON BUSY AND DATA REQUEST BITS

MASKBS EQU  >0100        MASK FOR BUSY BIT IN STATUS REG
MASKDR EQU  >0200        MASK FOR DATA REQUEST IN S REG

* NOW FOR 9640 PAD RAM LAYOUT

PRUPWS EQU  >F000        POWER UP AND GENERAL USE WORKSPACE
UTILWS EQU  PRUPWS+32    SUBROUTINE WORKSPACE

* NOW FOR SOME FLOPPY DISK CONSTANTS

T4080  EQU  UTILWS+32    40 TRACK DRIVE<>0 , 80 TRK=0
STEP   EQU  T4080+2      20 MILLISEC()0, 6 MILLISEC=0
MAKER  EQU  STEP+2       0 IF TI, 2 IF MYARC, 4 IF CORCOM, 6 IF NEW MYARC
FLPTRK EQU  MAKER+2      NUMBER OF TRACKS ON THIS FLOPPY DISK
SCPRTK EQU  FLPTRK+2     NUMBER OF SECTORS PER TRACK
CURTRK EQU  SCPRTK+2     THE CURRENT TRACK THE DRIVE HEAD IS ON ABSOLUTE
DENSIT EQU  CURTRK+2     SET IF DOUBLE, 0 IF SINGLE
HRDISK EQU  DENSIT+2     SET IF LOADING FROM HRDISK, ELSE 0
SAVR9  EQU  HRDISK+2     SAVE ENTRY TO DSR FOR DSRLNK
SAVR12 EQU  SAVR9+2      SAVE CRU BASE FOR DSRLNK
RETRY  EQU  SAVR12+2     RETRY COUNTER ON FLOPPY


       AORG >0000

       DATA PRUPWS,ENTRY  START VECTOR
FINDNM DATA UTILWS,FINDEN     SEE IF A NAME LIKE THIS IS OUT THERE ON THE BUS
FINCRU DATA UTILWS,FINCR1     SEE IF THIS DEVICE EXISTS ON CRU

ROMP01 DATA >F0F1             FOR ROM PAGES 0 AND 1 WHEN POWERED UP
       RT                     RETURN FROM KEYSCAN FOR PETER HODDIE
       RT

READSC DATA UTILWS,IOCM1

* for EPROM matching exercise only; 0.98 Eprom

       DATA >FFFF,>FFFF,>FFFF,>FFFF,>FFFF,>FFFF,>FFFF,>FFFF
       DATA >FFFF,>FFFF,>FFFF,>FFFF,>FFFF,>FFFF,>FFFF,>FFFF
       DATA >FFFF,>FFFF,>FFFF,>FFFF,>FFFF,>FFFF,>FFFF

       AORG >0044

       DATA >FFD8,>FFF8       XOP FOR DEBUGGER
HRDPAD DATA >09FF,>1000       DRIVE 9,READ OPCODE,BUFFER ADDRESS >1000
BOTNAM TEXT 'SYSTEM-SYS'                     4A  SECTOR READ
VDPREG DATA >0080,>0081,>8A88,>0089          4C  UNIT #    READ/WRITE
HW0000 DATA >0000                            4E  VDP BUFFER ADDRESS
CH0001 DATA >0001                            50  ERROR/SECTOR DESIRED
H0003  DATA >0003
CFRCIT DATA >D0D0
SNDOFS BYTE >9F,>BF,>DF,>FF   CONSTANTS TO TURN OFF SOUND

PUPMFL BYTE >F0,>00,>BA,>36,>ED,>EE,>03,>EF USE HIGH SPEED RAM

PUPCRB DATA >07B8             1,1,1,1,0,1,1,1,0,0,0
HEXAA  EQU  $
HAA55  DATA >AA55
H3FFF  DATA >3FFF
CBHFF  EQU  $-1
CWD40  DATA 40
CWD80  DATA 80
H0100  DATA >0100
H0200  DATA >0200
H09    BYTE >09
HFF    BYTE >FF
H12    BYTE >12
PKEY   BYTE >19          P KEY AS ON KEYBOARD
CBH92  BYTE >92
CBH89  BYTE >89
CBH3F  BYTE >3F
HEX20  BYTE >20
INITDS BYTE >1B          0,0,0,1,1,0,1,1

BADRAM BYTE 19
       TEXT '  BAD CPU RAM FOUND'
SECIOL BYTE 1,>10                  FOR DIRECT SECTOR I/O
       BYTE 0            *.98 eprom, to match EVEN directive
       EVEN

PAYLOAD1    DATA 0,0,0,0,0,0,0,0
PAYLOAD2    DATA 0,0,0,0,0,0,0,0
            DATA 0                     NEED OFFSET TO GET GENMOD IN RIGHT OFFSET


*  ABOVE ALSO USED FOR LOADING FROM NEW FLOPPY CONTROLLER

NOBOOT BYTE 31
       TEXT '  NO BOOT PROGRAM FOUND ON DISK'
READER BYTE 31
       TEXT '  CAN NOT READ FROM FLOPPY DISK'
WRGTYP BYTE 29
       TEXT '  LOAD FILE IS INCORRECT TYPE'
PRSRTY BYTE 24
       TEXT '  PRESS ANY KEY TO RETRY'

       EVEN
*===================================*
*                                   *
* character set for errors          *
*                                   *
*===================================*

CHRTBL
CHR65  DATA >0038,>447C,>4444,>4400 "A"
CHR66  DATA >0078,>4478,>4444,>7800
CHR67  DATA >0038,>4440,>4044,>3800
CHR68  DATA >0070,>4844,>4448,>7000
CHR69  DATA >007C,>4078,>4040,>7C00
CHR70  DATA >007C,>4078,>4040,>4000
CHR71  DATA >0038,>4440,>4C44,>3C00
CHR72  DATA >0044,>447C,>4444,>4400
CHR73  DATA >0038,>1010,>1010,>3800
CHR74  DATA >001C,>0808,>0848,>3000
CHR75  DATA >0048,>5060,>5048,>4400
CHR76  DATA >0040,>4040,>4040,>7C00
CHR77  DATA >0044,>6C54,>5444,>4400
CHR78  DATA >0044,>6464,>544C,>4400
CHR79  DATA >0038,>4444,>4444,>3800
CHR80  DATA >0078,>4444,>7840,>4000
CHR81  DATA >0038,>4444,>5448,>3400
CHR82  DATA >0078,>4444,>7848,>4400
CHR83  DATA >003C,>4038,>0404,>7800
CHR84  DATA >007C,>1010,>1010,>1000
CHR85  DATA >0044,>4444,>4444,>3800
CHR86  DATA >0044,>4428,>2810,>1000
CHR87  DATA >0044,>4454,>5454,>2800
CHR88  DATA >0044,>2810,>2844,>4400
CHR89  DATA >0044,>2810,>1010,>1000
CHR90  DATA >007C,>0408,>1020,>7C00  "Z"
ENDCTB EQU  $

***********************************
* NOW FOR TABLES FOR I/O OPERATIONS
* FIRST READ SECTOR COMMAND TI, MYARC, CORCOMP

READCM DATA >7777,>8888,>8080

* NOW RESTORE TI, MYARC, CORCOMP

RESTOR DATA >F5F5,>0808,>0909,>0808,>0909,>0A0A,>0B0B

* NOW FOR SEEK COMMAND

SEEKCM DATA >E5E5,>1818,>1919,>1818,>1919,>1A1A,>1B1B
SETMYR BYTE >13          DBL DEN,DRV 1,DSR EN,SIDE 0,ENABLE FDC

       BYTE 0            * added to match 0.98; odd boundary fix
*
* HERE IS THE BEGINNING OF THE BOOT SOFTWARE
*

ENTRY  LI   R12,CRUMOD        TURN OFF SOUND
       SBO  NCMOD             GET INTO NEW COMPUTER MODE

*
* now to turn off sound
*
       BL   @SNDOFF
*
* now initialize the keyboard
*
       SBO  CLRKB
       SBO  CLKKB
       SBZ  CLKKB
       SBZ  CLRKB
       SBO  CLRKB
       LI   R1,>2000
DR1R1  DEC  R1
       JNE  DR1R1
       SBO  CLKKB
*
* TIME OUT FOR 9901 TO POWER UP
*
       LI   R11,4             DELAY FOR 4 * 64K
ENTRY1 DEC  R12               WAIT FOR 9901
       JNE  ENTRY1
       SBO  CPEBRS
ENTRY2 DEC  R11
       JNE  ENTRY1
*
* NOW, MASK ALL INTERRUPTS and enable the ones used by this computer
*
       LDCR @HW0000,0
       SBO  INTVDP            ALLOW VDP INTERUPTS TO 9901 CHIP
       SBO  INTXT             ALLOW EXTERNAL INTERUPTS TO 9901 LEVEL 1
       SBO  INTKB             ALLOW KEYBOARD INTERUPTS
*
* NOW RESET 9938 AND PE BOX
* MAKE SURE R12 IS 0 HERE
*
       SBZ  KBREST       RESET EXTERNAL KEYBOARD IF POSSIBLE
       SBZ  C9938        START RESET OF 9938
*
* NOW TEST KEYBOARD FOR KEY INPUT FOR PAL VIDEO
*
* FIRST CLEAR KEY BUFFER


       LI   R12,CRUMOD
       SBO  MAPMOD       ENTER NON MAPPED MODE             1.9.2021


*
* ENABLE 9938 AND TURN OFF DISPLAY AND ENABLE EXTERNAL KEYBOARD
* ENABLE PE BOX SELECT SHORT EXTERNAL MEMORY CYCLES AND VDP WAIT STATES
*
       CLR  R12
       SBO  XMEMCY       SHORT EXTERNAL MEM CYCLES
       SBO  VDPWAT       VDP WAIT STATES
       SBO  KBREST       ENABLE KEYBOARD
       SBO  C9938        ENABLE 9938
       LI   R1,VDPREG    NOW SET UP VDP CHIP FOR INITIALIZATION
       LI   R15,VDPWA9   SET UP R15 TO WRITE ADDRESS
VRLD   MOV  *R1+,R0
       JEQ  VREGLD       BRANCH IF ALREADY LOADED
       MOVB R0,*R15
       SWPB R0
       MOVB R0,*R15
       JMP  VRLD


* ONE APPROACH  . . . .

SNDOFF LI   R1,SNDOFS
SNDOF1 MOVB *R1+,@>F120
       CI   R1,SNDOFS+4
       JNE  SNDOF1
       RT

VREGLD
*
* NOW FOR SETTING UP CORRECT MAP MODE IN 9640 MODE
*  WORRY ABOUT ONLY PAGE 0 AND 1 BEING CORRECT

       MOV  @ROMP01,@MAPRG9 SET UP PAGES 0 AND 1

*
* NOW SET UP THE CORRECT 11 USER CRU BITS IN THE GATE ARRAY AND 9995
*
       LI   R12,CRUMOD+10     SKIP FIRST 5 BITS WHICH ARE INPUT ONLY
       LDCR @PUPCRB,11        POWER UP CRU BITS
ISNPAL
NOKEY
*
* NOW PUT IN THE SWAN
*

       BLWP @SWAN                            1.9.2021

*
* NOW TEST IF THIS RAM IS GOOD TO BOOT TO ?
*

       CLR  R12
       SBZ  CPEBRS       ENABLE PE BOX DEVICES
       LI   R12,CRUMOD

       SBZ  MAPMOD       ENTER MAPPED MODE                 1.12.2021

       SBZ  CLKKB
       SBZ  CLRKB
       SBO  CLRKB
       MOVB @CBHFF,@MAPE9 MAKE SURE REGISTERS NOT MAPPED
       CLR  R3           GO THROUGH ALL 512 K OF RAM
       LI   R0,>A55A

GENMOD EQU  $+2

       LI   R2,>4000     WILL BE SECTOR EDITED AT THIS BYTE FOR GENMOD VERSION
LOOPR2 LI   R1,>2000     TESTING GENMOD AT PAGE >3A RESULTS IN BAD MEMORY
       MOVB R3,@MAP29
LOOPRT MOV  R0,*R1+
       C    R1,R2
       JNE  LOOPRT
       AI   R3,>0100
       C    R3,R2
       JL   LOOPR2
       SBO  CLKKB
       CLR  R3
LOOPR3 MOVB R3,@MAP29
       LI   R1,>2000
LOOPR1 C    R0,*R1+
       JEQ  GODRAM       JUMP IF DRAM IS OKAY

* TO BE HERE, WE HAVE AN ERROR IN READING RAM SO TELL THEM SO
       LI   R0,BADRAM    BAD RAM MESSAGE
       B    @BADLOD      PUT IT ON DISPLAY

GODRAM C    R1,R2
       JNE  LOOPR1
       AI   R3,>0100
       C    R3,R2
       JL   LOOPR3
       SBZ  CLRKB
       SBO  CLRKB

*
* NOW TO SET UP THE CORRECT MAP FILE FOR INITIALIZATION AND BOOT
*
       LI   R1,MAPRG9    POINT TO MAP REGISTERS OF 9640 MODE
       LI   R0,PUPMFL    SET UP THE MAP FILE FOR:
       MOV  *R0+,*R1+    ROM 0-1FFF,RAM TO BOOT TO ON 2000-3FFF
       MOV  *R0+,*R1+    PERIPHERALS 4000-5FFF, 6000 UNUSED
       MOV  *R0+,*R1+    8000, A000 UNUSED
       MOV  *R0,*R1      C000 UNUSED E000 FOR BUFFERS F000 PAD
*
* NOW INITIALIZE PE BOX PERIPHERALS
*

       LI   R1,>048E          DO ALL WORK ON PAGE 1 (NOT 0)
       BL   @SETVRG              OF VDP RAM

       LI   R12,CRUMOD        GET INTO 4A MODE
       SBZ  NCMOD

       LWPI GPLWS             USE GPL WORKSPACE TO POWER UP PERIPHERALS
*
* MAY WANT TO MAP IN A DIFFERENT PAGE OF VDP RAM HERE FOR PURPOSES
*  OF THE FLOOPY NOT TO OVERRIGHT THE DISPLAY
*
       MOV  @H3FFF,@>8370
       LI   R13,>9800         SET R13-R15 CORRECTLY
       LI   R14,>0100
       LI   R15,>8C02
*
       LI   R12,>0F00
*
PWR1   AI   R12,>0100
       CI   R12,>2000
       JEQ  PWR3A
       CI   R12,>1100
       JEQ  PWR1
       SBO  0
       CB   @>4000,@HEXAA
       JNE  PWR2
       MOV  @>4004,R9
       JEQ  PWR2
       MOV  @2(R9),R9
       JEQ  PWR2
       BL   *R9
       NOP
PWR2   SBZ  0
       JMP  PWR1

PWR3A

       LWPI PRUPWS       GO BACK TO USE CURRENT WORKSPACE

       LI   R12,CRUMOD   GET BACK TO 9640 MODE
       SBO  NCMOD

*
* NOW SEE WHAT IS OUT THERE IN TERMS OF BOOTING FROM
* FIRST SEE IF THERE IS INTERNAL RAM DISK WITHIN THE 9640 MEMORY MAP
*
* NOW TRY THE HORIZON RAM DISK
*
       CLR  @HRDISK      NO HR RAM DISK IN SYSTEM YET!
       LI   R0,HORRD
       BLWP @FINDNM
       DATA 8
       JEQ  NOHRRD       JUMP IF NO HORIZON RAM DISK INSTALLED

* FOUND A HORIZON RAM DISK IN THE SYSTEM
* NOW SEE IF THERE IS AN OPCODE >10 AT OFFSET >0A (GPLINK)
* REMEMBER, R12 (IN THE OTHER CONTEXT) CONTAINS THE CORRECT CRU BASE

       LI   R0,SECIOL    LET R0 POINT TO THE >0110 BYTE
       BLWP @FINCRU
       DATA 10
       JEQ  NOHRRD       BRANCH IF NOT FOUND CORRECTLY
       SETO @HRDISK      SET THE FLAG FOR HR LOAD
       MOV  @SAVR12,R12  MAKE SURE R12 IS SAVED CORRECTLY

       B    @TIFLOP      LOAD FROM IT

DSK1   BYTE 4
       TEXT 'DSK1'
SCS1   BYTE 4
       TEXT 'SCS1'
IDE1   BYTE 4
       TEXT 'IDE1'
CBH02  EQU  $
HORRD  BYTE 2
       TEXT 'HD'
WDS    BYTE 3
       TEXT 'WDS'
IDE    BYTE 3
       TEXT 'IDE'
SCS    BYTE 3
       TEXT 'SCS'
TIPI   BYTE 4            1.9.2021
       TEXT 'TIPI'       1.9.2021
DSK0   BYTE 4            1.9.2021
       TEXT 'DSK0'       1.9.2021

LOADWD     BYTE >05,0,>5,00,0,0,>30,00,0,13
           TEXT 'DSK1.LOAD-MFM'        FOR LOADING FROM WINCHESTER
LOADLN     EQU  $-LOADWD
           EVEN

LOADTIPI   BYTE >05,0,>5,00,0,0,>30,00,0,13                    1.9.2021
           TEXT 'DSK0.LOAD-TIP'        FOR LOADING FROM TIPI   1.9.2021
LOADTIPILN EQU  $-LOADTIPI                                     1.9.2021
           EVEN

LOADSCSI   BYTE >05,0,>5,00,0,0,>30,00,0,13                    1.30.2021
           TEXT 'SCS1.LOAD-SCS'        FOR LOADING FROM SCS1   1.30.2021
LOADSCSILN EQU  $-LOADSCSI                                     1.30.2021
           EVEN

LOADIDE    BYTE >05,0,>5,00,0,0,>30,00,0,13                    1.30.2021
           TEXT 'IDE1.LOAD-IDE'        FOR LOADING FROM IDE1   1.30.2021
LOADIDELN  EQU  $-LOADIDE                                      1.30.2021
       EVEN



*
* NOW SEE IF THE WINCHESTER IS INSTALLED
*

NOHRRD

       LI   R0,WDS
       BLWP @FINDNM
       DATA 8
       JEQ  NSWDSY       JUMP IF NO WDS INSTALLED AND TRY THIS

* NOW TRY TO LOAD FROM WDS1.DSK1.XXXXXXX  ETC.
* ACTUALLY FIND "DSK1.LOAD-MFM", SO FIND DSK1

       LI   R0,DSK1
       BLWP @FINCRU
       DATA 8
       JEQ  NOWDS1      THIS SHOULD NOT HAPPEN, BUT?       1.10.2021

* THIS WILL TAKE CARE OF LOADING FROM NEW FLOPPY DISK CONTROLLER ALSO
* CRUBASE AND ENTRY VECTOR IN OTHER WORKSPACE
* THEREFORE PUT NAME IN VDP RAM AND DO IT (MUST PUT IN 4A MODE TO DO IT)
* NOW LOAD NAME AND PAB TO VDP MEMORY AND TRY NORMAL VDP BASED LOAD FILE

       LI   R1,LOADWD
       LI   R0,>0044
       LI   R2,LOADLN
       BL   @SETVA       SET VDP RAM POINTER
LOWIN  MOVB *R1+,@VDPWD  LOAD FROM WINCHESTER
       DEC  R2
       JNE  LOWIN
       LI   R0,>040E
       MOV  R0,@>8356    POINTER TO "."
       LI   R0,4
       MOV  R0,@>8354    LENGTH
       LWPI >83E0
*
*  REMEMBER R13-R15 SET UP IN GPL WORKSPACE BEFORE
*
       LI   R12,CRUMOD   LOAD CRU BASE OF BITS
       SBZ  NCMOD        NOW IN 4A MODE
       MOV  @SAVR12,R12
       MOV  @SAVR9,R9
       BL   *R9
       JMP  NOWDS1       BRANCH IF NOT
       SBZ  0            TURN OFF CARD
       LWPI PRUPWS       LOAD POWER UP WORK SPACE
       LI   R12,CRUMOD
       SBO  NCMOD
* NOW TEST IF ERROR IN LOAD
       LI   R0,>0104
       BL   @SETVA
       SLA  R0,15             DELAY SOME TIME

       MOVB @VDPRD,R0         GET ERROR BYTE
       JNE  NOWDS1            ERROR, SO TRY TIPI          WAS NOWDS1 1.10.2021

* GOOD, SO FIND OUT WHERE IT GOES AND DO IT

       MOV  @LOADWD+2,R0
       MOV  R0,R7
       SWPB R0
       BL   @SETVA
       LI   R5,PRUPWS+2
       LI   R6,6
       A    R6,R7
LOWIN1 MOVB @VDPRD,*R5+       LOAD LOAD PARMS
       DEC  R6                NOW R2 CONTAINS LENGTH
       JNE  LOWIN1            AND R3 CONTAINS START ADDRESS IN CPU
       MOV  R3,R4             SAVE START ADDRESS
       MOV  R7,R0

       SWPB R0
       BL   @SETVA
* NOW TO LOAD MEMORY TO CPU RAM
       LI   R12,CRUMOD
       SBZ  NCMOD
LOWIN2 MOVB @VDPRD4,*R3+
       DEC  R2
       JNE  LOWIN2
* NOW IT IS IN CPU RAM SO START LOAD

       B    *R4

NOWDS1 MOV  @SAVR12,R12       MAKE SURE DSR TURNED OFF
       SBZ  0

       LWPI PRUPWS            SET WORKSPACE AGAIN
       LI   R12,CRUMOD        GET BACK TO 9640 MODE
       SBO  NCMOD

*
* NOW SEE IF THE SCSI IS INSTALLED
*

NSWDSY

       LWPI PRUPWS

       LI   R0,SCS
       BLWP @FINDNM
       DATA 8
       JEQ  NIWDSY       JUMP IF NO WDS INSTALLED AND TRY THIS

* NOW TRY TO LOAD FROM WDS1.DSK1.XXXXXXX  ETC.
* ACTUALLY FIND "DSK1.LOAD-MFM", SO FIND DSK1

       LI   R0,SCS1
       BLWP @FINCRU
       DATA 8
       JEQ  NSWDS1      THIS SHOULD NOT HAPPEN, BUT?

* THIS WILL TAKE CARE OF LOADING FROM NEW FLOPPY DISK CONTROLLER ALSO
* CRUBASE AND ENTRY VECTOR IN OTHER WORKSPACE
* THEREFORE PUT NAME IN VDP RAM AND DO IT (MUST PUT IN 4A MODE TO DO IT)
* NOW LOAD NAME AND PAB TO VDP MEMORY AND TRY NORMAL VDP BASED LOAD FILE

       LI   R1,LOADSCSI
       LI   R0,>0044
       LI   R2,LOADSCSILN
       BL   @SETVA       SET VDP RAM POINTER
LSWIN  MOVB *R1+,@VDPWD  LOAD FROM WINCHESTER
       DEC  R2
       JNE  LSWIN
       LI   R0,>040E
       MOV  R0,@>8356    POINTER TO "."
       LI   R0,4
       MOV  R0,@>8354    LENGTH
       LWPI >83E0
*
*  REMEMBER R13-R15 SET UP IN GPL WORKSPACE BEFORE
*
       LI   R12,CRUMOD   LOAD CRU BASE OF BITS
       SBZ  NCMOD        NOW IN 4A MODE
       MOV  @SAVR12,R12
       MOV  @SAVR9,R9
       BL   *R9
       JMP  NSWDS1       BRANCH IF NOT
       SBZ  0            TURN OFF CARD
       LWPI PRUPWS       LOAD POWER UP WORK SPACE
       LI   R12,CRUMOD
       SBO  NCMOD
* NOW TEST IF ERROR IN LOAD
       LI   R0,>0104
       BL   @SETVA
       SLA  R0,15             DELAY SOME TIME

       MOVB @VDPRD,R0         GET ERROR BYTE
       JNE  NSWDS1            ERROR, SO TRY TIPI          WAS NOWDS1 1.10.2021

* GOOD, SO FIND OUT WHERE IT GOES AND DO IT

       MOV  @LOADSCSI+2,R0
       MOV  R0,R7
       SWPB R0
       BL   @SETVA
       LI   R5,PRUPWS+2
       LI   R6,6
       A    R6,R7
LSWIN1 MOVB @VDPRD,*R5+       LOAD LOAD PARMS
       DEC  R6                NOW R2 CONTAINS LENGTH
       JNE  LSWIN1            AND R3 CONTAINS START ADDRESS IN CPU
       MOV  R3,R4             SAVE START ADDRESS
       MOV  R7,R0

       SWPB R0
       BL   @SETVA
* NOW TO LOAD MEMORY TO CPU RAM
       LI   R12,CRUMOD
       SBZ  NCMOD
LSWIN2 MOVB @VDPRD4,*R3+
       DEC  R2
       JNE  LSWIN2
* NOW IT IS IN CPU RAM SO START LOAD

       B    *R4

NSWDS1 MOV  @SAVR12,R12       MAKE SURE DSR TURNED OFF
       SBZ  0

       LWPI PRUPWS            SET WORKSPACE AGAIN
       LI   R12,CRUMOD        GET BACK TO 9640 MODE
       SBO  NCMOD

*********************************************************
*
* NOW SEE IF THE IDE1 IS INSTALLED
*

NIWDSY

       LWPI PRUPWS

       LI   R0,IDE
       BLWP @FINDNM
       DATA 8
       JEQ  NTWDSY       JUMP IF NO WDS INSTALLED AND TRY THIS

* NOW TRY TO LOAD FROM WDS1.DSK1.XXXXXXX  ETC.
* ACTUALLY FIND "DSK1.LOAD-MFM", SO FIND DSK1

       LI   R0,IDE1
       BLWP @FINCRU
       DATA 8
       JEQ  NIWDS1      THIS SHOULD NOT HAPPEN, BUT?

* THIS WILL TAKE CARE OF LOADING FROM NEW FLOPPY DISK CONTROLLER ALSO
* CRUBASE AND ENTRY VECTOR IN OTHER WORKSPACE
* THEREFORE PUT NAME IN VDP RAM AND DO IT (MUST PUT IN 4A MODE TO DO IT)
* NOW LOAD NAME AND PAB TO VDP MEMORY AND TRY NORMAL VDP BASED LOAD FILE

       LI   R1,LOADIDE
       LI   R0,>0044
       LI   R2,LOADIDELN
       BL   @SETVA       SET VDP RAM POINTER
LIWIN  MOVB *R1+,@VDPWD  LOAD FROM WINCHESTER
       DEC  R2
       JNE  LIWIN
       LI   R0,>040E
       MOV  R0,@>8356    POINTER TO "."
       LI   R0,4
       MOV  R0,@>8354    LENGTH
       LWPI >83E0
*
*  REMEMBER R13-R15 SET UP IN GPL WORKSPACE BEFORE
*
       LI   R12,CRUMOD   LOAD CRU BASE OF BITS
       SBZ  NCMOD        NOW IN 4A MODE
       MOV  @SAVR12,R12
       MOV  @SAVR9,R9
       BL   *R9
       JMP  NIWDS1       BRANCH IF NOT
       SBZ  0            TURN OFF CARD
       LWPI PRUPWS       LOAD POWER UP WORK SPACE
       LI   R12,CRUMOD
       SBO  NCMOD
* NOW TEST IF ERROR IN LOAD
       LI   R0,>0104
       BL   @SETVA
       SLA  R0,15             DELAY SOME TIME

       MOVB @VDPRD,R0         GET ERROR BYTE
       JNE  NIWDS1            ERROR, SO TRY TIPI          WAS NOWDS1 1.10.2021

* GOOD, SO FIND OUT WHERE IT GOES AND DO IT

       MOV  @LOADIDE+2,R0
       MOV  R0,R7
       SWPB R0
       BL   @SETVA
       LI   R5,PRUPWS+2
       LI   R6,6
       A    R6,R7
LIWIN1 MOVB @VDPRD,*R5+       LOAD LOAD PARMS
       DEC  R6                NOW R2 CONTAINS LENGTH
       JNE  LIWIN1            AND R3 CONTAINS START ADDRESS IN CPU
       MOV  R3,R4             SAVE START ADDRESS
       MOV  R7,R0

       SWPB R0
       BL   @SETVA
* NOW TO LOAD MEMORY TO CPU RAM
       LI   R12,CRUMOD
       SBZ  NCMOD
LIWIN2 MOVB @VDPRD4,*R3+
       DEC  R2
       JNE  LIWIN2
* NOW IT IS IN CPU RAM SO START LOAD

       B    *R4

NIWDS1 MOV  @SAVR12,R12       MAKE SURE DSR TURNED OFF
       SBZ  0

       LWPI PRUPWS            SET WORKSPACE AGAIN
       LI   R12,CRUMOD        GET BACK TO 9640 MODE
       SBO  NCMOD

NTWDSY

* NOW SEE IF THE TIPI IS INSTALLED
*
       LWPI PRUPWS

       LI   R0,TIPI
       BLWP @FINDNM
       DATA 8
       JNE  GOTTIPI
       B    @NOWDSY1


* NOW TRY TO LOAD FROM DSK0.XXXXXXX  ETC.
* ACTUALLY FIND "DSK0.LOAD-SYS", SO FIND DSK0

GOTTIPI
       LI   R0,DSK0
       BLWP @FINCRU
       DATA 8
       JEQ  NAWDS1      THIS SHOULD NOT HAPPEN, BUT?


* THIS WILL TAKE CARE OF LOADING FROM NEW FLOPPY DISK CONTROLLER ALSO
* CRUBASE AND ENTRY VECTOR IN OTHER WORKSPACE
* THEREFORE PUT NAME IN VDP RAM AND DO IT (MUST PUT IN 4A MODE TO DO IT)
* NOW LOAD NAME AND PAB TO VDP MEMORY AND TRY NORMAL VDP BASED LOAD FILE

       LI   R0,>0044
       LI   R1,LOADTIPI
       LI   R2,LOADTIPILN
       BL   @SETVA       SET VDP RAM POINTER
LAWIN  MOVB *R1+,@VDPWD  LOAD FROM TIPI
       DEC  R2
       JNE  LAWIN
       LI   R0,>040E
       MOV  R0,@>8356    POINTER TO "."
       LI   R0,4
       MOV  R0,@>8354    LENGTH
       LWPI >83E0
*
*  REMEMBER R13-R15 SET UP IN GPL WORKSPACE BEFORE
*
       LI   R12,CRUMOD   LOAD CRU BASE OF BITS
       SBZ  NCMOD        NOW IN 4A MODE

       MOV  @SAVR12,R12
       MOV  @SAVR9,R9
       BL   *R9
       JMP  NAWDS1       BRANCH IF NOT
       SBZ  0            TURN OFF CARD
       LWPI PRUPWS       LOAD POWER UP WORK SPACE
       LI   R12,CRUMOD
       SBO  NCMOD

* NOW TEST IF ERROR IN LOAD
       LI   R0,>0104
       BL   @SETVA
       SLA  R0,15             DELAY SOME TIME
       MOVB @VDPRD,R0         GET ERROR BYTE

* BELOW LINE ADDED TO TEST FOR ERROR

       JNE  NAWDS1            ERROR, SO TRY FLOPPY'S

* GOOD, SO FIND OUT WHERE IT GOES AND DO IT
       MOV  @LOADTIPI+2,R0

       MOV  R0,R7
       SWPB R0
       BL   @SETVA
       LI   R5,PRUPWS+2
       LI   R6,6
       A    R6,R7
LAWIN1 MOVB @VDPRD,*R5+       LOAD LOAD PARMS
       DEC  R6                NOW R2 CONTAINS LENGTH
       JNE  LAWIN1            AND R3 CONTAINS START ADDRESS IN CPU

       MOV  R3,R4             SAVE START ADDRESS
       MOV  R7,R0

       SWPB R0
       BL   @SETVA
* NOW TO LOAD MEMORY TO CPU RAM
       LI   R12,CRUMOD
       SBZ  NCMOD
LAWIN2 MOVB @VDPRD4,*R3+
       DEC  R2
       JNE  LAWIN2

* NOW IT IS IN CPU RAM SO START LOAD

       B    *R4

******************************

NAWDS1 MOV  @SAVR12,R12       MAKE SURE DSR TURNED OFF
       SBZ  0
       LWPI PRUPWS            SET WORKSPACE AGAIN
       LI   R12,CRUMOD        GET BACK TO 9640 MODE
       SBO  NCMOD
*
* NOW TO BE HERE, ONLY ALTERNATIVE TO BOOT FROM IS DSK1
*
* FIRST GET THE FLOPPY CONTROLLER TYPE


NOWDSY1

       CLR   @MAKER           ASSUME MYARC CONTROLLER CARD
       MOV   @CWD40,@T4080    ASSUME 40 TRACK DRIVE
       CLR   @STEP            ASSUME SLOW STEP SPEED (20 MILLI)
       MOV   @CWD40,@FLPTRK   ASSUME 40 TRACK FLOPPY DISKETTE
       SETO  @DENSIT          ASSUME DOUBLE DENSITY DISKETTE
       LI    R12,>1100        TURN ON CARD
       SBO   0
       LI    R10,>AA55
       CB    R10,@VALDSR      IS THERE A FLOPPY DISK CONTROLLER
       JEQ   NOWDSZ           BRANCH IF A DEVICE THERE
       B     @REDDER          BRANCH IF NO CONTROLLER AT >1100

NOWDSZ MOV   R10,@FLPRAM      TEST IF MYARC CARD WITH RAM AT >5000
       C     R10,@FLPRAM      WAS IT CHANGED?
       JNE   NOTMYA           BRANCH IF NOT A MYARC
* IS MYARC, SO SET DEFAULTS IN CRU BITS
       LDCR  @SETMYR,8
* IS MYARC, SO TEST IF 80 TRACK VERSION
       INCT  @MAKER           SET TO MYARC FLOPPY
       CB    @VERID,@CBH02
       JEQ   NORMYA           BRANCH IF NORMAL ROM (IE 40 TRACK)
* MAY BE AN 80 TRACK DRIVE SO TRY IT
       TB    7                IS IT 80 TRACK?
       JEQ   TIFLOP           NO
       MOV   @CWD80,@T4080    SET FOR 80 TRACK DRIVE
SIXMST INCT  @STEP            SET FOR STEP RATE OF 6 MILLISECONDS
       JMP   TIFLOP           CONTINUE
*
NORMYA TB    7                TEST IF 6 OR 20 MILLISECOND ACCESS TIME
       JNE   SIXMST           BRANCH IF 6 MILLISECONDS
       JMP   TIFLOP
*
NOTMYA LDCR  @INITDS,8        SELECT DSR,HEAD LOAD, DR 1,SIDE 0
       SBO   CROMPG           SEE IF IT IS A CORCOMP
*                             TURN ON SECOND PAGE OF ROM
*                             IF TI THEN THERE IS NO SECOND PAGE
       CB    @VALDSR,@HEXAA   IS IT A TI
       JEQ   TIFLOP           BRANCH IF TI TYPE
       SBZ   CROMPG           GO BACK TO PAGE 0
       INCT  @MAKER           CORCOM TYPE CONTROLLER
       INCT  @MAKER
       SBZ   CDENS            TRY DOUBLE DENSITY FIRST
* NOW GET THE STEP SPEED USED
       LI    R2,1             COMPENSATE FOR STEP OF MYARC CONTRROLLER
       TB    SW1              TEST SWITCH 1 (LIKE r0 OF CMD)
       JEQ   SW1SLO
       INC   R2               IT IS "0" SO IT IS "ON"
SW1SLO TB    SW2              TEST SWITCH 2 (LIKE r1 OF CMD)
       JEQ   SW2SLO
       INCT  R2               IT IS "0" SO IT IS "ON"
SW2SLO SLA   R2,1
       MOV   R2,@STEP
